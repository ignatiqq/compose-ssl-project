# TODO - ssl, see where cached files are exists

upstream apps {
    least_conn;
    # "nodejs" is container alias from docker-compose configuration, it exposes 4040 port
    server nodejs:4040  max_fails=3 fail_timeout=60s;
    # any other aervices to load balancing
}

# caching
proxy_cache_path /tmp/cache keys_zone=BACKEND_FRONTEND:10m loader_threshold=300 loader_files=200 max_size=200m;

# Rate limiting
# 5 requests per second for 1 ip user is max
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

server {
    listen 80;

    http2 on;

    # Enable GZip
    gzip on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/html text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # SSL certificate
    # ssl_certificate /etc/ssl/certs/nginx/tls.crt;
    # ssl_certificate_key /etc/ssl/certs/nginx/tls.key;

    # SSL settings
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;

    # Base headers
    add_header X-Hostname $hostname;
    add_header x-real-ip $remote_addr;

    root var/www/html;
    server_name localhost www.localhost;

    location / {
        limit_req zone=mylimit burst=20;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_pass http://apps;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # endpoint to test caching
    location /cached {
        limit_req zone=mylimit burst=20;

        # Определяет зону общей памяти, используемую для кэшировани
        proxy_cache BACKEND_FRONTEND;
        # Устанавливает время кэширования для разных кодов ответа.
        proxy_cache_valid 3m;

        # автоматическая ревалидация
        proxy_cache_revalidate on;
        # Позволяет запустить фоновый подзапрос для обновления элемента кэша с истекшим сроком действия, в то время как клиенту возвращается устаревший кэшированный ответ.
        proxy_cache_background_update on;
        # количество запросов, после которых ответ будет кэшироваться.
        proxy_cache_min_uses 1;
        # Определяет, в каких случаях устаревший кэшированный ответ может использоваться во время связи с прокси-сервером.
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;

        proxy_pass http://apps;
    }

    # Let's encrypt location endpoint
    # it will go for this endpoint and check token file, if its valid it gives us Sertificate
    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }
}